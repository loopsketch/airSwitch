<?xml version="1.0" encoding="utf-8"?>
<mx:List xmlns:mx="http://www.adobe.com/2006/mxml"
	dragEnabled="true" dropEnabled="true" dragMoveEnabled="true">
	<mx:itemRenderer>
		<mx:Component>
			<mx:HBox backgroundColor="#111111" horizontalScrollPolicy="off" doubleClickEnabled="true" doubleClick="edit(event)">
				<mx:Script><![CDATA[
					import mx.core.Application;
					import mx.managers.PopUpManager;
					import mx.core.IFlexDisplayObject;
					import mx.core.FlexGlobals;

					private function edit(event:Event):void {
						if (outerDocument.dragEnabled) {
							var i:int = outerDocument.selectedIndex;
							if (i != -1) {
								var popup:IFlexDisplayObject = PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject, ScheduleItemEditor, true);
								var item:XML = outerDocument.selectedItem as XML;
								if (item) {
									var editor:ScheduleItemEditor = popup as ScheduleItemEditor;
									editor.addEventListener(EditedWorkspaceEvent.EDITED, function(event:EditedWorkspaceEvent):void {
										outerDocument.dispatchEvent(new EditedWorkspaceEvent());
									});
									editor.workspace = outerDocument._workspace;
									editor.baseItem = item;
									PopUpManager.centerPopUp(popup);
								}
							}
						}
					}

					public final function rowNum(item:Object):String {
						var i:int = outerDocument.dataProvider.getItemIndex(item) + 1;
						return String(i);
					}

					public final function getType(item:Object):String {
						var xml:XML = item as XML;
						if (xml.@time) {
							var m:Object = SwitchUtils.scheduleToType(xml);
							if (m) {
								var data:Array = xml.@time.split(/\s+/, 6);
								var s:String = m.label;
								if (m.id == 1) {
									var w:Object = SwitchUtils.scheduleToWeek(xml);
									s = s + w.label + " ";
								} else if (m.id == 2) {
									s = data[0] + "/" + data[1] + "/" + data[2] + " ";
								}
								s = s + data[3] + ":" + data[4];
								return s;
							}							
						}
						return "-";
					}

					public final function getCommand(item:Object):String {
						var xml:XML = item as XML;
						var m:Object = SwitchUtils.scheduleToCommand(xml);
						if (m) {
							var s:String = m.label;
							if (m.command == "playlist") {
								var media:XMLList = outerDocument._workspace.playlists.playlist.(@id == m.data);
								if (media) s = s + " " + media.@name;
							} else if (m.command == "luminance") {
								s = s + " " + m.data + "%"
							}
							return s;
						}
						return "";
					}
				]]></mx:Script>
				<mx:Label text="{rowNum(data)}" width="25" textAlign="right" />
				<mx:Label text="{getType(data)}" width="200" />
				<mx:Label text="{getCommand(data)}" width="300" />
			</mx:HBox>
		</mx:Component>
	</mx:itemRenderer>
	<mx:Script><![CDATA[
		import mx.controls.Alert;
		import mx.managers.DragManager;
		import mx.events.DragEvent;
		import mx.events.DragEvent;

		public var _workspace:XML;


		public final function setData(workspace:XML):void {
			_workspace = workspace;
			dataProvider = _workspace.schedule.item;
		}

		private final function checkDragEvent(event:DragEvent):Boolean {
			if (event.dragInitiator is ScheduleEditor) {
				return true;
			}
			return false;
		}

		override protected final function dragEnterHandler(event:DragEvent):void {
			if (checkDragEvent(event)) {
				super.dragEnterHandler(event);
			} else {
				DragManager.showFeedback(DragManager.NONE);				
			}
		}

		override protected final function dragDropHandler(event:DragEvent):void {
			dispatchEvent(new EditedWorkspaceEvent());

			var pos:int = calculateDropIndex(event);
			if (event.dragInitiator is ScheduleEditor) {
				// 同じクラスからの場合はリストの入替えとする
				super.dragDropHandler(event);
				scrollToIndex(pos);
				return;
			}

			hideDropFeedback(event);
			event.target.mx_internal::lastDragEvent = null; 
			event.target.mx_internal::resetDragScrolling(); 
			DragManager.showFeedback(DragManager.NONE);
		}

		public final function update():void {
			for (var i:int = 0; i < dataProvider.length; i++) {
				var item:Object = dataProvider.getItemAt(i);
				dataProvider.itemUpdated(item);
				trace(item);
			}
		}

		//override protected final function dragCompleteHandler(event:DragEvent):void {
		//	super.dragCompleteHandler(event);
		//} 
	]]></mx:Script>
</mx:List>
