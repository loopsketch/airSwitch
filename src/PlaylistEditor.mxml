<?xml version="1.0" encoding="utf-8"?>
<mx:List xmlns:mx="http://www.adobe.com/2006/mxml"
	dragEnabled="true" dropEnabled="true" dragMoveEnabled="true">
	<mx:itemRenderer>
		<mx:Component>
			<mx:HBox backgroundColor="#111111" horizontalScrollPolicy="off" doubleClickEnabled="true" doubleClick="edit(event)">
				<mx:Script><![CDATA[
					import mx.core.Application;
					import mx.managers.PopUpManager;
					import mx.core.IFlexDisplayObject;

					private function edit(event:Event):void {
						if (outerDocument.dragEnabled) {
							var i:int = outerDocument.selectedIndex;
							if (i != -1) {
								var popup:IFlexDisplayObject = PopUpManager.createPopUp(Application.application as DisplayObject, PlaylistItemEditor, true);
								var item:XML = outerDocument.selectedItem as XML;
								if (item) {
									var editor:PlaylistItemEditor = popup as PlaylistItemEditor;
									editor.workspace = outerDocument._workspace;
									editor.baseItem = item;
									PopUpManager.centerPopUp(popup);
								}
							}
						}
					}

					public final function rowNum(item:Object):String {
						var i:int = outerDocument.dataProvider.getItemIndex(item) + 1;
						return String(i);
					}

					public final function getName(item:Object):String {
						var media:XMLList = outerDocument._workspace.medialist.item.(@id == item.toString());
						if (media) {
							return media.@name.toString();
						}
						return "(not found id:" + item.text().toString() + ")";
					}

					public final function getTransition(item:Object):String {
						var transition:String = item.@transition.toString();
						return transition;
					}

					public final function getNext(item:Object):String {
						var next:String = item.@next.toString();
						return next;
					}
				]]></mx:Script>
				<mx:Label text="{rowNum(data)}" width="25" textAlign="right" />
				<mx:Label text="{getName(data)}" width="300" />
				<mx:Label text="{getTransition(data)}" width="50" />
				<mx:Label text="{getNext(data)}" width="50" />
			</mx:HBox>
		</mx:Component>
	</mx:itemRenderer>
	<mx:Script><![CDATA[
		import mx.managers.DragManager;
		import mx.events.DragEvent;
		import mx.events.DragEvent;

		public var _workspace:XML;


		public final function setData(workspace:XML):void {
			_workspace = workspace;
		}

		private final function checkDragEvent(event:DragEvent):Boolean {
			if (event.dragInitiator is MediaSelector || event.dragInitiator is PlaylistEditor) {
				if (event.dragSource.hasFormat("items")) {
					var items:Array = event.dragSource.dataForFormat('items') as Array;
					return (typeof(items[0]) == "xml" && items[0].name() == "item");
				}
			}
			return false;
		}

		override protected final function dragEnterHandler(event:DragEvent):void {
			if (checkDragEvent(event)) {
				super.dragEnterHandler(event);
			} else {
				DragManager.showFeedback(DragManager.NONE);				
			}
		}

		override protected final function dragDropHandler(event:DragEvent):void {
			dispatchEvent(new EditedWorkspaceEvent());

			var pos:int = calculateDropIndex(event);
			if (event.dragInitiator is PlaylistEditor) {
				// 同じクラスからの場合はリストの入替えとする
				super.dragDropHandler(event);
				scrollToIndex(pos);
				return;
			}

			hideDropFeedback(event);
			event.target.mx_internal::lastDragEvent = null; 
			event.target.mx_internal::resetDragScrolling(); 
			DragManager.showFeedback(DragManager.NONE);

			// アイテム追加
			var items:Array = event.dragSource.dataForFormat('items') as Array;
			var data:XML = <item />;
			data.setChildren(items[0].@id.toString());
			dataProvider.addItemAt(data, pos);
		}

		//override protected final function dragCompleteHandler(event:DragEvent):void {
		//	super.dragCompleteHandler(event);
		//} 
	]]></mx:Script>
</mx:List>
